plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

base {
    archivesName = "${mod_name}-Forge-${minecraft_version}"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "${mod_id}.common.mixins.json"
        mixinConfig "${mod_id}.forge.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${mixin_extras}"))

    //include implementation("org.openjdk.nashorn:nashorn-core:${nashorn_version}")

    // Configuration APIs currently supported by Dynamic Surroundings
    modImplementation("me.shedaniel.cloth:cloth-config-forge:${clothapi_version}")
    modImplementation("dev.isxander.yacl:yet-another-config-lib-neoforge:${yacl_version}")
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = base.archivesName.get()
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
